import{af as u,ag as D,ah as K,r as E,A as v,v as h}from"./index-Cq-zLFLx.js";async function H(t,o=0,r=!1){const i=await F(t.name,t.size,t.type,o,r);if(!i||!i.uploadId)throw new Error("初始化上传失败");const C=i.uploadId,m=await M(C),T=(m==null?void 0:m.uploadedChunks)||[],w=Math.ceil(t.size/6291456);for(let k=0;k<w;k++){if(T.includes(k))continue;const $=k*6291456,N=Math.min(t.size,$+6291456),b=t.slice($,N);await _(C,k,b)}return await P(C,w)}function F(t,o,r,d=0,i=!1){return u({url:"/api/files/chunk/init",method:"post",data:{filename:t,fileSize:o,fileType:r,parentId:d,isPublic:i}})}function _(t,o,r){const d=new FormData;return d.append("uploadId",t),d.append("chunkIndex",o.toString()),d.append("chunk",r),u({url:"/api/files/chunk/upload",method:"post",data:d,headers:{"Content-Type":"multipart/form-data"}})}function M(t){return u({url:`/api/files/chunk/uploaded/${t}`,method:"get"})}function P(t,o){return u({url:`/api/files/chunk/complete/${t}`,method:"post",data:{totalChunks:o},timeout:6e4})}function Z(t,o,r=0,d=!1){const i=new FormData;return t.forEach((C,m)=>{i.append("files",C),i.append("relativePaths",o[m])}),i.append("parentId",r.toString()),i.append("isPublic",d?"true":"false"),u({url:"/api/files/upload-folder",method:"post",data:i,headers:{"Content-Type":"multipart/form-data"}})}function R(t){return u({url:`/api/files/${t}`,method:"delete"})}function O(t){return u({url:`/api/files/${t}/download`,method:"get"})}function B(t,o){return u({url:`/api/files/${t}/public`,method:"put",params:{isPublic:o}})}function x(t=0,o=1,r=10){return u({url:"/api/files/my",method:"get",params:{parentId:t,page:o,size:r}})}function L(t=1,o=10){return u({url:"/api/files/public",method:"get",params:{page:t,size:o}})}function X(t,o=1,r=10){return u({url:"/api/files/search",method:"get",params:{keyword:t,page:o,size:r}})}function G(t){return u({url:`/api/files/${t}`,method:"get"})}function W(t,o=0){return u({url:"/api/files/folder",method:"post",data:{folderName:t,parentId:o}})}function j(t,o){return u({url:`/api/files/${t}/folder-public`,method:"put",params:{isPublic:o}})}function q(t){const o=localStorage.getItem("token");return D.get(`/api/files/proxy/${t}`,{responseType:"blob",headers:{Authorization:o?`Bearer ${o}`:""}}).then(r=>r.data)}const U={getUserFiles:x,getPublicFiles:L,uploadFile:H,uploadFolder:Z,createFolder:W,getFileDownloadUrl:O,deleteFile:R,updateFilePublicStatus:B,updateFolderPublicStatus:j,searchFiles:X,getFileInfo:G,downloadFileDirectly:q,initChunkUpload:F,uploadChunk:_,getUploadedChunks:M,completeChunkUpload:P},se=K("uploadTask",()=>{const t=E([]),o=E(!1),r=v(()=>t.value.some(s=>s.status==="completed")),d=v(()=>t.value.filter(s=>s.status==="uploading")),i=v(()=>t.value.filter(s=>s.status==="completed")),C=()=>`task_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,m=(s,e=0,a=!1)=>{console.log("添加上传任务到store:",s.name,s.size);const n=C(),l={id:n,fileName:s.name,fileSize:s.size,uploadedSize:0,progress:0,status:"uploading",uploadId:"",file:s,totalChunks:0,uploadedChunks:[],parentId:e,isPublic:a,abortController:new AbortController,createTime:Date.now(),failedChunks:new Set,retryCount:new Map};return t.value.push(l),console.log("任务已添加到store，当前任务列表:",t.value),z(n),n},T=async(s,e=3)=>{const a=[];for(const n of s){const l=n().then(()=>{a.splice(a.indexOf(l),1)}).catch(c=>{throw a.splice(a.indexOf(l),1),c});a.push(l),a.length>=e&&await Promise.race(a)}await Promise.all(a)},w=async(s,e,a,n=3)=>{const l=s.retryCount.get(e)||0;try{await U.uploadChunk(s.uploadId,e,a),s.uploadedChunks.includes(e)||(s.uploadedChunks.push(e),s.uploadedSize+=a.size,s.progress=s.file.size>0?Math.min(s.uploadedSize/s.file.size*100,100):0),s.failedChunks.delete(e),s.retryCount.delete(e),console.log(`分块 ${e} 上传完成，进度: ${s.progress.toFixed(2)}%`)}catch(c){if(console.error(`分块 ${e} 上传失败 (第${l+1}次尝试):`,c),l<n)return s.retryCount.set(e,l+1),s.failedChunks.add(e),await new Promise(g=>setTimeout(g,Math.pow(2,l)*1e3)),w(s,e,a,n);throw s.failedChunks.add(e),new Error(`分块 ${e} 上传失败，已重试 ${n} 次`)}},z=async s=>{const e=t.value.find(a=>a.id===s);if(!(!e||e.status!=="uploading"))try{const l=await U.initChunkUpload(e.file.name,e.file.size,e.file.type,e.parentId,e.isPublic);if(!l||!l.uploadId)throw new Error("初始化上传失败");e.uploadId=l.uploadId;const c=await U.getUploadedChunks(e.uploadId);e.uploadedChunks=(c==null?void 0:c.uploadedChunks)||[],e.totalChunks=Math.ceil(e.file.size/6291456);let g=0;for(const p of e.uploadedChunks){const S=p*6291456,y=Math.min(e.file.size,S+6291456);g+=y-S}e.uploadedSize=g,e.progress=e.file.size>0?e.uploadedSize/e.file.size*100:0;const f=[];for(let p=0;p<e.totalChunks;p++)e.uploadedChunks.includes(p)||f.push(async()=>{if(e.status!=="uploading")return;const S=p*6291456,y=Math.min(e.file.size,S+6291456),A=e.file.slice(S,y);await w(e,p,A)});if(f.length>0&&(console.log(`开始并发上传 ${f.length} 个分块，最大并发数: 4`),await T(f,4)),console.log(`上传状态检查: 已上传分块数=${e.uploadedChunks.length}, 总分块数=${e.totalChunks}, 失败分块数=${e.failedChunks.size}`),e.uploadedChunks.length===e.totalChunks&&e.failedChunks.size===0&&e.status==="uploading")try{console.log("所有分块上传完成，开始合并文件"),await U.completeChunkUpload(e.uploadId,e.totalChunks),e.status="completed",e.progress=100,h.success(`文件 ${e.fileName} 上传成功`)}catch(p){console.error("完成上传请求失败:",p),e.status="completed",e.progress=100,h.warning(`文件 ${e.fileName} 上传完成，但服务器响应超时。请检查文件列表确认上传状态。`)}else e.failedChunks.size>0&&(console.error(`上传失败: 有 ${e.failedChunks.size} 个分块上传失败`),e.status="error",h.error(`文件 ${e.fileName} 上传失败：有 ${e.failedChunks.size} 个分块上传失败`))}catch(a){console.error("上传失败:",a),e.status="error",h.error(`文件 ${e.fileName} 上传失败`)}};return{tasks:t,isUploading:o,hasCompletedTasks:r,uploadingTasks:d,completedTasks:i,addTask:m,startUploadTask:z,pauseTask:s=>{var a;const e=t.value.find(n=>n.id===s);e&&(e.status="paused",(a=e.abortController)==null||a.abort(),e.abortController=null,h.info(`已暂停上传 ${e.fileName}`))},resumeTask:s=>{const e=t.value.find(a=>a.id===s);e&&(e.status="uploading",e.abortController=new AbortController,e.failedChunks||(e.failedChunks=new Set),e.retryCount||(e.retryCount=new Map),z(s),h.success(`继续上传 ${e.fileName}`))},cancelTask:s=>{var n;const e=t.value.findIndex(l=>l.id===s);if(e===-1)return;(n=t.value[e].abortController)==null||n.abort(),t.value.splice(e,1),h.info("已取消上传任务")},removeTask:s=>{const e=t.value.findIndex(a=>a.id===s);e!==-1&&t.value.splice(e,1)},clearCompletedTasks:()=>{t.value=t.value.filter(s=>s.status!=="completed"),h.success("已清除所有已完成任务")},getStatusText:s=>{switch(s){case"uploading":return"上传中";case"paused":return"已暂停";case"completed":return"已完成";case"error":return"上传失败";default:return"未知状态"}},getStatusClass:s=>{switch(s){case"uploading":return"status-uploading";case"paused":return"status-paused";case"completed":return"status-completed";case"error":return"status-error";default:return""}},formatFileSize:s=>{const e=["B","KB","MB","GB","TB"];let a=0,n=s;for(;n>=1024&&a<e.length-1;)n/=1024,a++;let l=0;return a===1?l=1:a>=2&&(l=2),n.toFixed(l).replace(/\.0+$/,"")+" "+e[a]},getUploadStats:s=>{var c,g;const e=t.value.find(f=>f.id===s);if(!e)return null;const a=e.uploadedChunks.length,n=((c=e.failedChunks)==null?void 0:c.size)||0,l=Array.from(((g=e.retryCount)==null?void 0:g.values())||[]).reduce((f,I)=>f+I,0);return{totalChunks:e.totalChunks,successfulChunks:a,failedChunks:n,pendingChunks:e.totalChunks-a-n,totalRetries:l,successRate:e.totalChunks>0?(a/e.totalChunks*100).toFixed(2):"0.00"}}}});export{U as f,se as u};
